{"ast":null,"code":"// 从actionTypes里面引入addToCart\nimport { addToCart } from \"../Action/ActionTypes\";\n// 引入 data\nimport shareShop from \"../../data/data\";\nlet data = shareShop();\nlet product = {\n  products: data,\n  cartItems: []\n};\n// 定义reducer函数，reducer函数里面有两个参数 1. state  2. action\nlet rootReducer = (state = product, action) => {\n  switch (action.type) {\n    case \"addToCart\":\n      // 解构商品的属性,,  find 是查找并返回数据的\n      let {\n        id,\n        name,\n        brand,\n        desc,\n        price,\n        img,\n        size,\n        color,\n        parameter\n      } = state.products.find(product => product.parameter == action.payload);\n      // 用 boolean 来判断购物车里是否有该数据， 用来当作判断的 true or false\n      // 判断购物车里是否有该数据或该商品，如果有，则让其数量+1，如果没有 则添加进购物车里面\n      let existingItem = state.cartItems.find(item => item.id == id);\n      if (existingItem) {\n        return {\n          // 如果存在该商品，则让该商品的数量 +1\n          //   结合运用扩展运算符，进行商品页面和购物车数据的更新，\n          ...state,\n          cartItems: state.cartItems.map(item => item.id == id ? {\n            ...item,\n            quantity: item.quantity + 1\n          } : item)\n        };\n      } else {\n        //   如果没有该商品时\n        return {\n          ...state,\n          cartItems: [...state.cartItems, {\n            id,\n            name,\n            brand,\n            desc,\n            price,\n            img,\n            size,\n            color,\n            parameter,\n            quantity: 1\n          }]\n        };\n      }\n    default:\n      return state;\n  }\n};\n// 暴露出rootReducer\nexport default rootReducer;","map":{"version":3,"names":["addToCart","shareShop","data","product","products","cartItems","rootReducer","state","action","type","id","name","brand","desc","price","img","size","color","parameter","find","payload","existingItem","item","map","quantity"],"sources":["/Users/fs/Documents/Eyewear website/my-project/src/Components/Reducer/ReducerOne.js"],"sourcesContent":["// 从actionTypes里面引入addToCart\nimport { addToCart } from \"../Action/ActionTypes\";\n// 引入 data\nimport shareShop from \"../../data/data\";\nlet data = shareShop();\nlet product = {\n  products: data,\n  cartItems: [],\n};\n// 定义reducer函数，reducer函数里面有两个参数 1. state  2. action\nlet rootReducer = (state = product, action) => {\n  switch (action.type) {\n    case \"addToCart\":\n      // 解构商品的属性,,  find 是查找并返回数据的\n      let { id, name, brand, desc, price, img, size, color, parameter } =\n        state.products.find((product) => product.parameter == action.payload);\n      // 用 boolean 来判断购物车里是否有该数据， 用来当作判断的 true or false\n      // 判断购物车里是否有该数据或该商品，如果有，则让其数量+1，如果没有 则添加进购物车里面\n      let existingItem = state.cartItems.find((item) => item.id == id);\n      if (existingItem) {\n        return {\n          // 如果存在该商品，则让该商品的数量 +1\n          //   结合运用扩展运算符，进行商品页面和购物车数据的更新，\n          ...state,\n          cartItems: state.cartItems.map((item) =>\n            item.id == id ? { ...item, quantity: item.quantity + 1 } : item\n          ),\n        };\n      } else {\n        //   如果没有该商品时\n        return {\n          ...state,\n          cartItems: [\n            ...state.cartItems,\n            {\n              id,\n              name,\n              brand,\n              desc,\n              price,\n              img,\n              size,\n              color,\n              parameter,\n              quantity: 1,\n            },\n          ],\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n// 暴露出rootReducer\nexport default rootReducer;\n"],"mappings":"AAAA;AACA,SAASA,SAAS,QAAQ,uBAAuB;AACjD;AACA,OAAOC,SAAS,MAAM,iBAAiB;AACvC,IAAIC,IAAI,GAAGD,SAAS,CAAC,CAAC;AACtB,IAAIE,OAAO,GAAG;EACZC,QAAQ,EAAEF,IAAI;EACdG,SAAS,EAAE;AACb,CAAC;AACD;AACA,IAAIC,WAAW,GAAGA,CAACC,KAAK,GAAGJ,OAAO,EAAEK,MAAM,KAAK;EAC7C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,WAAW;MACd;MACA,IAAI;QAAEC,EAAE;QAAEC,IAAI;QAAEC,KAAK;QAAEC,IAAI;QAAEC,KAAK;QAAEC,GAAG;QAAEC,IAAI;QAAEC,KAAK;QAAEC;MAAU,CAAC,GAC/DX,KAAK,CAACH,QAAQ,CAACe,IAAI,CAAEhB,OAAO,IAAKA,OAAO,CAACe,SAAS,IAAIV,MAAM,CAACY,OAAO,CAAC;MACvE;MACA;MACA,IAAIC,YAAY,GAAGd,KAAK,CAACF,SAAS,CAACc,IAAI,CAAEG,IAAI,IAAKA,IAAI,CAACZ,EAAE,IAAIA,EAAE,CAAC;MAChE,IAAIW,YAAY,EAAE;QAChB,OAAO;UACL;UACA;UACA,GAAGd,KAAK;UACRF,SAAS,EAAEE,KAAK,CAACF,SAAS,CAACkB,GAAG,CAAED,IAAI,IAClCA,IAAI,CAACZ,EAAE,IAAIA,EAAE,GAAG;YAAE,GAAGY,IAAI;YAAEE,QAAQ,EAAEF,IAAI,CAACE,QAAQ,GAAG;UAAE,CAAC,GAAGF,IAC7D;QACF,CAAC;MACH,CAAC,MAAM;QACL;QACA,OAAO;UACL,GAAGf,KAAK;UACRF,SAAS,EAAE,CACT,GAAGE,KAAK,CAACF,SAAS,EAClB;YACEK,EAAE;YACFC,IAAI;YACJC,KAAK;YACLC,IAAI;YACJC,KAAK;YACLC,GAAG;YACHC,IAAI;YACJC,KAAK;YACLC,SAAS;YACTM,QAAQ,EAAE;UACZ,CAAC;QAEL,CAAC;MACH;IAEF;MACE,OAAOjB,KAAK;EAChB;AACF,CAAC;AACD;AACA,eAAeD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}